#! /usr/bin/env perl

# PODNAME: sciolist-agent
# ABSTRACT: Provide a long-running agent for keeping sciolist keystores resident in memory.
# VERSION

use feature qw[ say ];
use strictures;

use Config::Any;
use Config::Find;
use File::Basename;
use IO::All;
use RPC::Serialized::Server::NetServer;
use Try::Tiny;
use UUID::Tiny;

use FindBin;
use lib "$FindBin::Bin/../lib";

exit sciolist_agent(@ARGV);

sub __infer_shell_from_context
{
	return 'c' if $ENV{SHELL} =~ /csh/;
	return 'bourne';
}

sub __get_bourne_shell_global_syntax
{
	my ($key, $value) = @_;

	return "$key=\"$value\" ; export $key"
}

sub __get_c_shell_global_syntax
{
	my ($key, $value) = @_;

	return "setenv $key \"$value\"";
}

sub print_environment
{
	my (%environment) = @_;

	my $shell = __infer_shell_from_context();
	for my $key (keys %environment) {
		if ($shell eq 'c') {
			say __get_c_shell_global_syntax($key, $environment{$key});
		}
		else {
			say __get_bourne_shell_global_syntax($key, $environment{$key});
		}
	}
}

sub sciolist_agent
{
	my $uuid = UUID_to_string(create_UUID());
	my $socket = "/tmp/sciolist-agent.$uuid.sock";
	my %environment = (
		SCIOLIST_PID => $$,
		SCIOLIST_RPC_SOCKET => $socket,
	);
	print_environment(%environment);
	RPC::Serialized::Server::NetServer->new({
		net_server => {
			port => "$socket|unix",
		},
		rpc_serialized => {
			handler_namespaces => 'App::sciolist::Agent::RPC::Handler',
		}
	})->run;
	return 1;
}
